<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="KKH">

	
	<resultMap type="HashMap" id="library">
		<result property="LIBCODE" column="libcode" />
		<result property="LIBNAME" column="libname" />
		<result property="COUNT" column="count" />
	</resultMap>
	<!-- 모든 도서관리스트를 가져오는 쿼리문, 서브쿼리로 count를 넣어서 해당 도서관코드를 가진 모든 책 갯수도 가져온다. -->
	<select id="findAllLibrary" parameterType="HashMap" resultMap="library">
		select libcode, libname, nvl(count,0) as count 
		from library L left join (
		
		select  libcode_fk,count(*) as count
		from 
		<if test="LIBCODE!=null and LIBCODE!=''">
		 (select libcode_fk from book where libcode_fk = #{LIBCODE})
		</if>
		<if test="LIBCODE==null or LIBCODE==''">
		 book
		</if>
		group by libcode_fk
		) B on L.libcode = B.libcode_fk
	</select>
	
	<resultMap type="HashMap" id="language">
		<result property="LCODE" column="lcode" />
		<result property="LNAME" column="lname" />
		<result property="COUNT" column="count" />
	</resultMap>
	<!--  언어 테이블에 있는 정보들을 가져오는 쿼리문, 서브쿼리로 count를 넣어서 해당 언어코드를 가진 모든 책들을 가져온다.
		덤으로 사서,도서관장이 접속한 경우 해당 도서관 코드로 where 조건을넣어 갯수를 구한다. -->
	<select id="findAllLanguage" parameterType="HashMap" resultMap="language">
		select lcode,lname, nvl(count,0) as count
		from language L left join
		(
		select lcode_fk, count(*) as count
		from 
		<if test="LIBCODE!=null and LIBCODE!=''">
		 (select lcode_fk from book where libcode_fk = #{LIBCODE})
		</if>
		<if test="LIBCODE==null or LIBCODE==''">
		 book
		</if>
		group by lcode_fk
		) B on L.lcode = B.lcode_fk
	</select>
	
	<resultMap type="HashMap" id="category">
		<result property="CCODE" column="ccode" />
		<result property="CNAME" column="cname" />
		<result property="COUNT" column="count" />
	</resultMap>
	<!--  category 테이블에 있는 정보들을 가져오는 쿼리문, 서브쿼리로 count를 넣어서 해당 category 코드를 가진 모든 책들을 가져온다.
		덤으로 사서,도서관장이 접속한 경우 해당 도서관 코드로 where 조건을넣어 갯수를 구한다. -->
	<select id="findAllCategory" parameterType="HashMap" resultMap="category">
		select ccode, cname, nvl(count,0) as count
		from category C left join (
		select ccode_fk, count(*) as count
		from
		<if test="LIBCODE!=null and LIBCODE!=''">
		 (select ccode_fk from book where libcode_fk = #{LIBCODE})
		</if>
		<if test="LIBCODE==null or LIBCODE==''">
		 book
		</if>
		group by ccode_fk
		) B on C.ccode = B.ccode_fk
	</select>
	
	<resultMap type="HashMap" id="field">
		<result property="FCODE" column="fcode" javaType="String"/>
		<result property="FNAME" column="fname" javaType="String"/>
		<result property="COUNT" column="count" javaType="String"/>
	</resultMap>
	<!--  field 테이블에 있는 정보들을 가져오는 쿼리문, 이때 field 값들은 100여가지나 되기때문에 큰 종류인 100단위 정보들만 가져와서 보여준다.
		 서브쿼리로 count를 넣어서 해당 field 코드를 가진 모든 책들을 가져온다.
		덤으로 사서,도서관장이 접속한 경우 해당 도서관 코드로 where 조건을넣어 갯수를 구한다. -->
	<select id="findAllField" parameterType="HashMap" resultMap="field">
    select fcode,fname,nvl(count,0) as count
    from
    (
		select substr(fcode,1,1)as fcode, fname
		from field
		where fcode in ('000','100','200','300','400','500','600','700','800','900')
     ) F left join 
     (   select substr(fcode_fk,1,1) as fcode_fk, count(*) as count
         from 
        <if test="LIBCODE!=null and LIBCODE!=''">
		 (select fcode_fk from book where libcode_fk = #{LIBCODE})
		</if>
		<if test="LIBCODE==null or LIBCODE==''">
		 book
		</if>
         group by substr(fcode_fk,1,1) 
    ) B on substr(F.fcode,1,1) = substr(B.fcode_fk,1,1)
    order by fcode
	</select>
	

	<!-- 사이드바로 검색할때 도서리스트를 가져오는 쿼리문,입력받은 검색 조건에 따라 where조건절이 달라진다.
		distinct 를 이용해 도서번호가 두번째 하이푼(-) 이전 까지 동일한 책을 한 줄로 보여줘서 가져오게 했다. 
		ex)	L1000KRE02530UN-1-4
			L1000KRE02530UN-1-5
			L1000KRE02530UN-1-6 
			은 한줄로 보이게 된다.	 
		-->
	<select id="findBookBysidebar" parameterType="HashMap"
		resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select  distinct substr(A.bookid,1, instr(A.bookid,'-',1,2)-1 ) as bookid, title, author,  agecode 
                ,gcode_fk, gname,ncode_fk,  nname,lcode_fk, lname,fcode_fk,  fname,ccode_fk,  cname
                ,libcode_fk,  libname ,pubcode_fk, pubname, count
        from book A join book_detail D on A.bookid = D.bookid join genre G on A.gcode_fk = G.gcode join nation N on A.ncode_fk = N.ncode join language L on A.lcode_fk = L.lcode
        join field F on A.fcode_fk = F.fcode join category C on A.ccode_fk = C.ccode join library LIB on A.libcode_fk = LIB.libcode join publisher P on A.pubcode_fk = P.pubcode
        join 
        (select substr(bookid,1, instr(bookid,'-',1,2)-1 ) as bookid,  count(*) as count
        from book
        group by substr(bookid,1, instr(bookid,'-',1,2)-1 )
        ) V
        on substr(A.bookid,1, instr(A.bookid,'-',1,2)-1 ) = V.bookid
		where 1=1
		
		<if test="LIBRARY!='' and LIBRARY!=null">
			and libcode_fk in (${LIBRARY})
		</if>
		 <if test="CATEGORY!='' and CATEGORY!=null">
			and ccode_fk in	(${CATEGORY})
			
		</if>
		<if test="LANGUAGE!='' and LANGUAGE!=null">
			and lcode_fk in (${LANGUAGE})
		</if>
		<if test="FIELD!='' and FIELD!=null">
			and substr(fcode_fk,1,1) in (${FIELD})
		</if> 
		<if test="SORT=='count'">
			order by ${SORT} desc
		</if>
		<if test="SORT!='count'">
			order by ${SORT}
		</if>
	</select>
	
	
	<!--  검색창을 이용해 도서리스트를 검색할 경우 사용되는 쿼리문,위와 동일하게 같은 도서번호는 한줄로 보여진다.
	 		사서가 접속했을때엔 where 조건의 도서관코드를 사서의 도서관코드로 입력해준다.-->
	<select id="findBookBysearchbar" parameterType="HashMap" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select  distinct substr(A.bookid,1, instr(A.bookid,'-',1,2)-1 ) as bookid, title, author,  agecode 
                ,gcode_fk, gname,ncode_fk,  nname,lcode_fk, lname,fcode_fk,  fname,ccode_fk,  cname
                ,libcode_fk,  libname ,pubcode_fk, pubname, count
        from book A join book_detail D on A.bookid = D.bookid join genre G on A.gcode_fk = G.gcode join nation N on A.ncode_fk = N.ncode join language L on A.lcode_fk = L.lcode
        join field F on A.fcode_fk = F.fcode join category C on A.ccode_fk = C.ccode join library LIB on A.libcode_fk = LIB.libcode join publisher P on A.pubcode_fk = P.pubcode
        join 
        (select substr(bookid,1, instr(bookid,'-',1,2)-1 ) as bookid,  count(*) as count
        from book
        group by substr(bookid,1, instr(bookid,'-',1,2)-1 )
        ) V
        on substr(A.bookid,1, instr(A.bookid,'-',1,2)-1 ) = V.bookid
        <if test="SEARCHWORD!=''">
		 	where LOWER(${SEARCHTYPE}) like '%'||LOWER('${SEARCHWORD}')||'%'
		 </if>
		 <if test="LIBRARY!='' and LIBRARY!=null">
		 		and libcode_fk = #{LIBRARY}
		 </if>
		 <if test="SORT=='count'">
			order by ${SORT} desc
		</if>
		<if test="SORT!='count'">
			order by ${SORT}
		</if>
	</select>
	
	
	<!-- 도서 상세페이지로 이동할때 가져가는 메소드, 도서번호의 두번째 하이푼(-) 이전까지 동일한 모든 책들을 검색하여 리스트에 넣는다.
		 order by 는 해당 도서의 상세 일련번호를 1부터 순서대로 나오게 했다.
		 ex) L1000KRE02530UN-1-4
		 	 L1000KRE02530UN-1-5  이렇게 있으면
		 	 이중 4,5 부분만 뽑아서 순서대로 order by 함
		 	 그래서  4부터 시작해서 나오게 함-->
	<select id="findBookDetail" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select A.bookid, title, author, agecode	,gcode_fk, gname,ncode_fk, nname,lcode_fk, lname,fcode_fk, fname,ccode_fk, cname
		,libcode_fk, libname ,pubcode_fk, pubname, isbn, price, intro, D.image, weight, totalpage, to_char(D.pdate,'yyyy-mm-dd') as pdate, to_char(D.regdate,'yyyy-mm-dd') as regdate, A.status, isbn
		from book A join book_detail D on A.bookid = D.bookid join genre G on A.gcode_fk = G.gcode join nation N on	A.ncode_fk = N.ncode join language L on A.lcode_fk = L.lcode
		join field F on A.fcode_fk = F.fcode join category C on A.ccode_fk = C.ccode join library LIB on A.libcode_fk = LIB.libcode
		join publisher P on A.pubcode_fk = P.pubcode
		where substr(A.bookid,1, instr(A.bookid,'-',1,2)-1 ) = #{bookid}
		order by to_number(substr(A.bookid,instr(A.bookid,'-',1,2))) desc
	</select>
	
	<resultMap type="HashMap" id="BookReservation">
		<result property="BOOKID" column="bookid" javaType="String"/>
		<result property="TITLE" column="title" javaType="String" />
		<result property="BOOKREGDATE" column="bookregdate" javaType="String"/>
		<result property="MSTATUS" column="mstatus" javaType="String" />
		<result property="BSTATUS" column="bstatus" javaType="String" />
		<result property="ISBN" column="isbn" javaType="String" />
		<result property="PHONE" column="phone" javaType="String" />
		<result property="MEMBERREGDATE" column="memberregdate" javaType="String" />
		<result property="MEMBERID" column="memberid" javaType="String" />
		<result property="RESERVEDATE" column="reservedate" javaType="String" />
		<result property="NAME" column="name" javaType="String" />
	</resultMap>
	<!-- 도서 상세 페이지에 보여주는 책들중, 예약된 책이 있을경우 리스트로 가져오는 쿼리문 
		mstatus 는 해당 책을 예약한 회원상태, bstatus 는 해당 도서의 상태값이다. -->
	<select id="findBookReservation" parameterType="String" resultMap="BookReservation">
		select B.bookid, title, isbn, to_char(D.regdate,'yyyy-mm-dd') as bookregdate, M.status as mstatus,M.phone, to_char(M.regdate, 'yyyy-mm-dd') as memberregdate, memberid,reservedate,M.name
				,B.status as bstatus
		from book B join reservation R on B.bookid = R.bookid_fk
		join member M on R.memberid_fk = M.memberid join book_detail D on B.bookid = D.bookid
		where substr(R.bookid_fk,1, instr(R.bookid_fk,'-',1,2)-1 ) = #{bookid}
		order by to_number(substr(R.bookid_fk,instr(R.bookid_fk,'-',1,2))) desc
	</select>
	
<!-- 도서상세페이지에서 공용정보 수정을 위한 항목별 정보 가져오기 시작 -->	
	<resultMap type="HashMap" id="genre">
		<result property="GCODE" column="gcode"/>
		<result property="GNAME" column="gname"/>
	</resultMap>
	<select id="findGenre" resultMap="genre">
		select gcode,gname
		from genre
	</select>
	
	<!-- field 테이블의 큰 항목(000,100,200... 900)까지의 정보들을 가져오는 쿼리문 -->
	<select id="findField" resultMap="field">
		select substr(fcode,1,1) as fcode ,fname
		from field
		where fcode in ('000','100','200','300','400','500','600','700','800','900')
	</select>
	
	<!-- 큰항목에 따른 작은항목(110,120,130...)의 정보들을 가져오는 쿼리문 -->
	<select id="findDetailField" parameterType="String" resultMap="field">
		select fcode,fname
		from field
		where substr(fcode,1,1) = #{bigfcode}
        order by fcode
	</select>
<!-- 도서상세페이지에서 공용정보 수정을 위한 항목별 정보 가져오기 끝 -->
	
	<!-- 도서수정시 수정하려는 정보와 기존정보를 비교하기위해 해당 조건을 만족하는 책 1개의 정보를 가져온다. -->
	<select id="findOneBook" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select lcode_fk, gcode_fk, fcode_fk, ccode_fk,libcode_fk,ncode_fk
		from book
		where bookid like '%'||#{value}||'%'
	</select>
	
	<!-- 새롭게 부여할 도서번호의 큰번호 [L1000KRE02530UN-1 <<== 1에 해당하는 번호] 를 채번해오는 쿼리문-->
	<!--  nvl은 새롭게 부여할 도서코드가 처음 생성되어야 할경우 1을 넣기 위해 사용한다. -->
	<select id="findNewBook1stNum" parameterType="String" resultType="int">
		select nvl(max(to_number(substr(bookid,instr(bookid,'-',1,1)+1,length(substr(bookid,1,instr(bookid,'-',1,2) ) )-length(substr(bookid,1, instr(bookid,'-',1,1 )+1) ) ) ) )+1,1) as firstNum
		from book
		where bookid like '%'||#{value}||'%'
	</select>
	
	<!-- 새롭게 부여할 도서번호를 book테이블에서 update하기 위해  제약조건으로 연결된 book_detail 테이블의 정보를 삭제하기전 select 해오는 쿼리문 -->
	<select id="selectBookDetail" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select bookid, idx, intro, image, price, weight, totalpage,pdate,regdate
		from book_detail
		where bookid like '%'||#{value}||'%'
	</select>
	
	<!--  위에서 select 한 도서들을 book_detail 테이블에서 삭제한다. -->
	 <delete id="deleteBookDetail" parameterType="String">
		delete from book_detail where bookid like '%'||#{value}||'%'
	</delete> 
	
	<!-- 수정하려는 도서에 새롭게 부여할 도서번호를 update해주는 메소드 -->
	<update id="updateNewBookid" parameterType="HashMap">
		update book set libcode_fk = #{EDITLIBRARY}, ncode_fk = #{EDITNATION}, lcode_fk = #{EDITLANGUAGE}
						,ccode_fk = #{EDITCATEGORY}, fcode_fk = #{EDITFIELD}, gcode_fk = #{EDITGENRE}
						,title = #{EDITTITLE}, author = #{EDITAUTHOR}
						,bookid = #{NEWBOOKID}||substr(bookid,instr(bookid,'-',1,2)) , agecode = #{EDITAGECODE}
		where bookid like '%'||#{BOOKID}||'%'
	</update>
	
	<!-- 저장해두었던 book_detail 테이블의 정보를 새롭게 bookid를 부여해서 insert 해준다. -->
	<insert id="inserNewBookDetail" parameterType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
			insert into book_detail(bookid,idx,intro,image,price,weight,totalpage,pdate,regdate)
			values(#{bookid},to_number(#{idx}),#{intro},#{image},to_number(#{price}),#{weight},to_number(#{totalpage}),to_date(#{pdate},'yyyy-mm-dd hh24:mi:ss'),default)
	</insert>
	
	<!--공용정보 수정페이지에서  이미지 파일을 변경했을경우 book_detail 테이블의 image컬럼을 update 해준다. -->
	<update id="updateNewBookDetail" parameterType="HashMap">
		update book_detail set 
		<if test="EDITIMAGE!=null">
		image = #{EDITIMAGE},
		</if>
		where bookid like'%'||#{NEWBOOKID}||'%'
	</update>
	
	
	<!-- //수정하려는 도서들의 book 테이블의 정보를 update해준다. -->
	<update id="updateBookInfo" parameterType="HashMap">
		update book set title = #{EDITTITLE}, author = #{EDITAUTHOR}, agecode = #{EDITAGECODE}
		where bookid like '%'||#{BOOKID}||'%'
	</update>
	
	<!-- 이미지 파일을 변경했을경우 book_detail 테이블의 image컬럼값을 update 해준다. -->
	<update id="updateBookDetail" parameterType="HashMap">
		update book_detail set image = #{EDITIMAGE}
		where bookid like'%'||#{BOOKID}||'%'
	</update>
	
	<update id="editIndivBookInfo" parameterType="HashMap">
		update book_detail set  price = #{EDITPRICE}, weight=#{EDITWEIGHT}, totalpage = #{EDITTOTALPAGE}, pdate = to_date(#{EDITPDATE},'yyyy-mm-dd hh24:mi:ss')
		where bookid  = #{BOOKID}
	</update>
	
	<update id="editIndivBookISBN" parameterType="HashMap">
		update book set isbn = #{EDITISBN}
		where bookid = #{BOOKID}
	</update>
	
	<delete id="deleteIndivBookDetail" parameterType="String">
		delete from book_detail where bookid = #{bookid}
		
	</delete>
	
	<delete id="deleteIndivBook" parameterType="String">
		delete from book where bookid = #{bookid}
		
	</delete>
	
	<select id="findBookSampleList" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select bookid,title,author,pubcode_fk,agecode,isbn,ncode_fk,lcode_fk,fcode_fk,ccode_fk,gcode_fk,libcode_fk
		from book
		where bookid like '%'||#{bookid}||'%'
		order by to_number(substr(bookid,instr(bookid,'-',1,2))) desc
	</select>
	
	<select id="findBookDetailSampleList" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select intro,image,price,weight,totalpage,pdate,regdate
		from book_detail
		where bookid like '%'||#{bookid}||'%'
		order by to_number(substr(bookid,instr(bookid,'-',1,2))) desc
	</select>
	
	
	<select id="findStartBookNum" parameterType="String" resultType="int">
		select max(to_number(substr(bookid,instr(bookid,'-',1,2)+1 )) )+1 as startBookNum
		from book
		where bookid like '%'||#{bookid}||'%'
	</select>
	
	
	<insert id="insertAdditionalBookInfo" parameterType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		insert into book(bookid, idx, title, author, PUBCODE_FK, STATUS, AGECODE, ISBN,
						 NCODE_FK, LCODE_FK, FCODE_FK, CCODE_FK, GCODE_FK, LIBCODE_FK) 
		values( #{bookid}, book_seq.nextval, #{title}, #{author}, #{pubcode_fk}, default, #{agecode}, #{isbn}, #{ncode_fk},
				#{lcode_fk}, #{fcode_fk},  #{ccode_fk}, #{gcode_fk}, #{libcode_fk})
	</insert>
	
	<insert id="insertAdditionalBookDetailInfo" parameterType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		insert into book_detail(bookid,idx,intro,image,price,weight,totalpage,pdate,regdate)
		values(#{bookid},bookd_seq.nextval,#{intro},#{image},to_number(#{price}),#{weight},to_number(#{totalpage}),to_date(#{pdate},'yyyy-mm-dd hh24:mi:ss'),default)
	</insert>
	
	<select id="deleteBookList" parameterType="String" resultType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		select B.bookid,title,author,pubcode_fk,status,agecode,isbn,libcode_fk, ncode_fk, lcode_fk, fcode_fk, ccode_fk, gcode_fk, intro,image,price,weight,totalpage,pdate,regdate
		from book B join book_detail D
		on 	B.bookid = D.bookid
		where B.bookid like '%'||#{bookid}||'%'
	</select>
	
	<select id="selectDelid" resultType="int">
		select delid_seq.nextval
		from dual
	</select>
	
	<insert id="insertDelete_Book" parameterType="com.spring.bookmanage.book.KKHmodel.KKHBookVO">
		insert into delete_book(idx,bookid,title,author,pubcode,status,agecode,isbn,libcode,ncode,lcode,fcode,ccode,gcode,intro,image,price,weight,totalpage,pdate,regdate,deldate,cleanerid,delid)
		values(delbook_seq.nextval, #{bookid}, #{title}, #{author}, #{pubcode_fk}, #{status}, #{agecode}, #{isbn}
				,#{libcode_fk}, #{ncode_fk}, #{lcode_fk}, #{fcode_fk}, #{ccode_fk}, #{gcode_fk}
				,#{intro}, #{image}, #{price}, #{weight}, #{totalpage}, to_date(#{pdate},'yyyy-mm-dd hh24:mi:ss'), to_date(#{regdate},'yyyy-mm-dd hh24:mi:ss'), sysdate, #{cleanerid}, #{delid})
	</insert>
	
	<delete id="deleteBook" parameterType="String">
		delete from  book where bookid like '%'||#{bookid}||'%'
	</delete>
	
	<delete id="deleteBook_Detail" parameterType="String">
		delete from  book_detail where bookid like '%'||#{bookid}||'%'
	</delete>
	
	<update id="updateDeadline" parameterType="String">
		update rental set deadline = deadline+7,renew = renew+1
        where bookid_fk = #{extendBookid} 
            and renew != 3
            and  (select count(*)
            from reservation 
            where bookid_fk = #{extendBookid}) = 0
	</update>
	
	
	<resultMap type="HashMap" id="rentalBook">
		<result property="IDX" column="idx"  javaType="String"/>
		<result property="BOOKID_FK" column="bookid_fk" javaType="String" />
		<result property="RENTALDATE" column="rentaldate" javaType="String" />
		<result property="DEADLINE" column="deadline" javaType="String"/>
		<result property="RENEW" column="renew" javaType="String"/>
		<result property="LATEDATE" column="latedate" javaType="String"/>
		<result property="MEMBERID_FK" column="memberid_fk" javaType="String"/>
	</resultMap>
	<select id="findRentalBook" parameterType="String" resultMap="rentalBook">
		select idx,bookid_fk, memberid_fk, rentaldate, deadline,renew , trunc(sysdate - deadline) as latedate 
		from rental
		where bookid_fk = #{returnBookid}
	</select>
	
	<select id="getReserveCount" parameterType="String" resultType="String">
		select count(*) as reserveCount
		from reservation
		 where bookid_fk = #{returnBookid}
	</select>
	
	<insert id="insertReturnedBook" parameterType="HashMap">
		insert into returned(idx,memberid_fk,bookid_fk,returndate,rentaldate,deadline)
		values(returned_seq.nextval,#{MEMBERID_FK},#{BOOKID_FK}, default, to_date(#{RENTALDATE},'yyyy-mm-dd hh24:mi:ss'), to_date(#{DEADLINE},'yyyy-mm-dd hh24:mi:ss'))
	</insert>
	
	 <update id="updateReturnBookStatus" parameterType="HashMap">
	 	update book set 
	 	<if test="RESERVECOUNT==1">
			status =  2
		</if>
		<if test="RESERVECOUNT==0">
			status =  0
		</if>
		where bookid = #{BOOKID_FK}
	</update>
	
	<update id="updateLateMember" parameterType="HashMap">
		update member set latefee =100*#{LATEDATE}, revokedate = #{LATEDATE}, status = 2
		where memberid = #{MEMBERID_FK}	
	</update> 
	
	<delete id="deleteRentalBook" parameterType="String">
		delete from rental where bookid_fk = #{returnBookid}
	</delete>
	
	<update id="CancelChangeStatus" parameterType="String">
		update book set status = 0
		where bookid = #{cancelBookid}
			  and status in (1,2,3)
	</update>
	
	<delete id="reserveCancel" parameterType="String">
		delete from reservation where bookid_fk = #{cancelBookid}
	</delete>
</mapper>