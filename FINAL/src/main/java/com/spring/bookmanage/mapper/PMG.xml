<?xml version="1.0" encoding="UTF-8"?>

<!-- ===== mapper 기본 설정 ===== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- ===== 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) ===== --> 
<mapper namespace="PMG">

	<!-- 회원 상세 정보 -->
	<select id="findOneMemberByIdx" parameterType="String" resultType="com.spring.bookmanage.member.PMGmodel.PMGMemberVO">	
		select idx, memberid, pwd, name, email, phone, addr1, addr2, post
		     , '(우)'|| post ||' '|| addr1 ||' '|| addr2 AS address
		     , substr(birth,1,4) ||'년'|| substr(birth,5,2) ||'월'|| substr(birth,7,2) ||'일' AS birth
		     , extract(year from sysdate) - substr(birth,1,4) + 1 AS age
		     , case gender when 0 then '남' else '여' end AS gender
		     , to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		     , to_char(lastdate, 'yyyy-mm-dd hh24:mi:ss') AS lastDate
		     , to_char(pwdate, 'yyyy-mm-dd hh24:mi:ss') AS pwDate
		     , case status when 0 then '활동'
		                   when 1 then '휴면'
		                   when 2 then '정지'
		                   when 3 then '탈퇴'
		                   when 4 then '영구정지'
		                   else '존재하지 않는 회원' end AS status
		from member
		where idx = #{idx}	
	</select>

	<update id="EditActivityOneMemberByIdx" parameterType="String">
		update member set status = 0
		where idx = #{idx}
	</update>
	
	<update id="EditInactivityOneMemberByIdx" parameterType="String">
		update member set status = 0
		where idx = #{idx}
	</update>
	
	<update id="EditWithdrawalOneMemberByIdx" parameterType="String">
		update member set status = 3
		where idx = #{idx}
	</update>
	<update id="EditShutdownOneMemberByIdx" parameterType="String">
		update member set status = 4
		where idx = #{idx}
	</update>


	  
	<resultMap type="HashMap" id="rentalMap">
		<result property="ROWNUM" column="rownum" javaType="String" />
		<result property="MEMBERID" column="memberid" javaType="String" />
		<result property="BOOKID" column="bookid" javaType="String" />
		<result property="TITLE" column="title" javaType="String" />
		<result property="AUTHOR" column="author" javaType="String" />
		<result property="CATEGORYNAME" column="categoryName" javaType="String" />
		<result property="PUBLISHERNAME" column="publisherName" javaType="String" />
		<result property="LIBRARYNAME" column="libraryName" javaType="String" />
		<result property="STATUS" column="status" javaType="String" />
		<result property="RENTALDATE" column="rentalDate" javaType="String" />
		<result property="DEADLINE" column="deadline" javaType="String" />
		<result property="RENEW" column="renew" javaType="String" />
		<result property="OVERDUE" column="overdue" javaType="int" />
		<result property="LATEFEE" column="latefee" javaType="int" />		
	</resultMap>
	<select id="memberBookRentalList" parameterType="String" resultMap="rentalMap">
		select rownum, memberid
		     , bookid, title, author
		     , C.cname AS categoryName
		     , pubname AS publisherName
		     , libname AS libraryName
		     , B.status AS status
		     , to_char(rentalDate, 'yyyy-mm-dd hh24:mi:ss') AS rentalDate
		     , to_char(deadline, 'yyyy-mm-dd') AS deadline
		     , case renew when 0 then 'X' else 'O' end AS renew
		     , trunc(rentaldate - sysdate) AS overdue
		     , trunc(rentaldate - sysdate) * 100 AS latefee
		from member M join rental R
		on M.memberid = R.memberid_fk
		join book B
		on R.bookid_fk = B.bookid
		join category C
		on B.ccode_fk = C.ccode
		join publisher P
		on B.pubcode_fk = P.pubcode
		join library L
		on B.libcode_fk = L.libcode
		where M.memberid = #{memberid}
		order by rownum desc	
	</select>

	
	<!-- <resultMap type="HashMap" id="reservationMap">
		<result property="ROWNUM" column="rownum" javaType="String" />
		<result property="MEMBERID" column="memberid" javaType="String" />
		<result property="BOOKID" column="bookid" javaType="String" />
		<result property="TITLE" column="title" javaType="String" />
		<result property="AUTHOR" column="author" javaType="String" />
		<result property="CATEGORYNAME" column="categoryName" javaType="String" />
		<result property="PUBLISHERNAME" column="publisherName" javaType="String" />
		<result property="LIBRARYNAME" column="libraryName" javaType="String" />
		<result property="STATUS" column="status" javaType="String" />
		<result property="RESERVEDATE" column="reservedate" javaType="String" />				
	</resultMap>
	<select id="memberBookReservationList" parameterType="String" resultMap="reservationMap">
		select rownum, memberid
		     , bookid, title, author
		     , C.cname AS categoryName
		     , pubname AS publisherName
		     , libname AS libraryName
		     , B.status AS status
		     , to_char(reservedate, 'yyyy-mm-dd') AS reservedate
		from member M join reservation R
		on M.memberid = R.memberid_fk
		join book B
		on R.bookid_fk = B.bookid
		join category C
		on B.ccode_fk = C.ccode
		join publisher P
		on B.pubcode_fk = P.pubcode
		join library L
		on B.libcode_fk = L.libcode
		where M.memberid = #{memberid}
		order by rownum desc
	</select> -->
	
	
	<!-- 공지사항 글쓰기(파일첨부가 없는 글쓰기) *** 총괄관리자, 도서관장 => 공지사항 등록 if조건으로 구분 -->
	<insert id="noticeWriteadd" parameterType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		<if test='adminid_fk != null'>
			insert into notice(idx, adminid_fk, name, subject, content, pw, readCount, regDate, status, libcode)
			values(notice_seq.nextval, #{adminid_fk}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, default)
		</if>
		<if test='libid_fk != null'>	
			insert into notice(idx, libid_fk, name, subject, content, pw, readCount, regDate, status, libcode)
			values(notice_seq.nextval, #{libid_fk}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{libcode})
		</if>
	</insert>
	<!-- 공지사항 글쓰기(파일첨부가 있는 글쓰기) *** 총괄관리자, 도서관장 => 공지사항 등록 if조건으로 구분 -->
	<insert id="noticeWriteadd_withFile" parameterType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		<if test='adminid_fk != null'>
			insert into notice(idx, adminid_fk, name, subject, content, pw, readCount, regDate, status, fileName, orgFileName, fileSize, libcode)
			values(notice_seq.nextval, #{adminid_fk}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{fileName}, #{orgFileName}, #{fileSize}, default)
		</if>
		<if test='libid_fk != null'>
			insert into notice(idx, libid_fk, name, subject, content, pw, readCount, regDate, status, fileName, orgFileName, fileSize, libcode)
			values(notice_seq.nextval, #{libid_fk}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{fileName}, #{orgFileName}, #{fileSize}, #{libcode})
		</if>
	</insert>

	<!-- 검색조건에 만족하는 총게시물 갯수를 알아오기 -->
	<select id="getTotalCountWithSearch" parameterType="HashMap" resultType="int">
		select count(*)
		from notice
		where status = 0
		and ${COLNAME} like '%'|| #{SEARCH} ||'%'
	</select>
	<!-- 검색조건이 없는 총게시물 갯수를 알아오기 -->
	<select id="getTotalCountNoSerach" resultType="int">
		select count(*)
		from notice
		where status = 0
	</select>
	<!-- 검색조건이 없는것 또는 검색조건이 있는 것을 포함한 전체 공지사항 목록 가져오기(페이징 처리 함) -->
	<select id="noticeListPaging" parameterType="HashMap" resultType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		select idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		     , regDate, status
		     , fileName, orgFileName, fileSize
		from
		(
		    select rownum AS RNO
		         , idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		         , regDate, status
		         , fileName, orgFileName, fileSize
		    from
		    (
		        select idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		             , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		             , status
		             , fileName, orgFileName, fileSize
		        from notice
		        where status = 0
		        <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		        and ${COLNAME} like '%'|| #{SEARCH} ||'%'
		        </if>	
		        order by idx asc	      
		    ) V
		    order by RNO desc
		) T
		where RNO between #{STARTRNO} and #{ENDRNO}
	</select>
	
	
	<!-- 총관리자 -->
	<select id="noticeListWithSearch" parameterType="HashMap" resultType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		select idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		     , regDate, status
		     , fileName, orgFileName, fileSize
		     , libname
		from
		(
		    select rownum AS rno, idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		         , regDate, status
		         , fileName, orgFileName, fileSize
		         , libname
		    from
		    (
		        select N.idx, N.libid_fk, N.adminid_fk, N.name, N.subject, N.content, N.pw, N.readCount
		             , to_char(N.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		             , N.status
		             , N.fileName, N.orgFileName, N.fileSize
		             , nvl(L.libname, '총관리자') AS libname
		        from notice N left join library L
		        on N.libcode = L.libcode
		        where status = 0
		        <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
				and upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
				</if>
		        order by N.idx desc
		    ) V
		    order by RNO asc
		)T
		where RNO between #{RNO1} and #{RNO2}
	</select>
	
	<select id="getNoticeTotalCount" resultType="int" parameterType="HashMap">		
		select count(*)
		from notice N left join library L
		on N.libcode = L.libcode
		where status = 0
		<if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		and upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
		</if>
	</select>
	
	
	<!-- 도서관장 -->
	<select id="noticelib1ListWithSearch" parameterType="HashMap" resultType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		select idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		     , regDate, status
		     , fileName, orgFileName, fileSize
		     , libname
		from
		(
		    select rownum AS rno, idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		         , regDate, status
		         , fileName, orgFileName, fileSize
		         , libname
		    from
		    (
		        select N.idx, N.libid_fk, N.adminid_fk, N.name, N.subject, N.content, N.pw, N.readCount
		             , to_char(N.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		             , N.status
		             , N.fileName, N.orgFileName, N.fileSize
		             , nvl(L.libname, '총관리자') AS libname
		        from notice N left join library L
		        on N.libcode = L.libcode
		        where status = 0 and N.libcode = #{LIBCODE} or adminid_fk IS NOT NULL			    		        	         
		        order by idx desc
		    ) V
		    <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		    where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
		    </if>
		    order by RNO asc
		) T
		where RNO between #{RNO1} and #{RNO2}
	</select>
	<select id="lib1getNoticeTotalCount" resultType="int" parameterType="HashMap">	
		select count(*)
		from
			(
			select N.idx, N.libid_fk, N.adminid_fk, N.name, N.subject, N.content, N.pw, N.readCount
			     , to_char(N.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
			     , N.status
			     , N.fileName, N.orgFileName, N.fileSize
			     , nvl(L.libname, '총관리자') AS libname
			from notice N left join library L
			on N.libcode = L.libcode
			where status = 0 and N.libcode = #{LIBCODE} or adminid_fk IS NOT NULL
			order by idx desc
			) V	        
	    <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
		</if>	       
	</select>
	
	
	<!-- 사서 -->
	<select id="noticelib0ListWithSearch" parameterType="HashMap" resultType="com.spring.bookmanage.board.PMGmodel.PMGNoticeVO">
		select idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		     , regDate, status
		     , fileName, orgFileName, fileSize
		     , libname
		from
		(
		    select rownum AS rno, idx, libid_fk, adminid_fk, name, subject, content, pw, readCount
		         , regDate, status
		         , fileName, orgFileName, fileSize
		         , libname
		    from
		    (
		        select N.idx, N.libid_fk, N.adminid_fk, N.name, N.subject, N.content, N.pw, N.readCount
		             , to_char(N.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		             , N.status
		             , N.fileName, N.orgFileName, N.fileSize
		             , nvl(L.libname, '총관리자') AS libname
		        from notice N left join library L
		        on N.libcode = L.libcode
		        where status = 0 and N.libcode = #{LIBCODE}		    		        	         
		        order by idx desc
		    ) V
		    <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		    where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
		    </if>
		    order by RNO asc
		) T
		where RNO between #{RNO1} and #{RNO2}
	</select>
	<select id="lib0getNoticeTotalCount"  resultType="int" parameterType="HashMap">
		select count(*)
		from
			(
			select N.idx, N.libid_fk, N.adminid_fk, N.name, N.subject, N.content, N.pw, N.readCount
			     , to_char(N.regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
			     , N.status
			     , N.fileName, N.orgFileName, N.fileSize
			     , nvl(L.libname, '총관리자') AS libname
			from notice N left join library L
			on N.libcode = L.libcode
			where status = 0 and N.libcode = #{LIBCODE}
			order by idx desc
			) V	        
	    <if test='SEARCH != null and SEARCH != "" and SEARCH != "null" '>
		where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
		</if>
	</select>
	
	
	
</mapper>

