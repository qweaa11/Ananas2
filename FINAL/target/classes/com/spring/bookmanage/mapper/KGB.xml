<?xml version="1.0" encoding="UTF-8"?>
<!-- ===== #28. mapper 기본 설정 ===== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ===== #29. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) ===== --> 
<mapper namespace="kgb">

	<!-- 컬럼명과 검색어를 받아 회원을 조회 -->
	<select id="findAllMemberBySearchWord" parameterType="HashMap" resultType="com.spring.bookmanage.member.JGHmodel.MemberVO">
	
		select *
		from member
		where ${CATEGORY} like '%' || #{SEARCHWORD} || '%'
		and status = 0
	
	</select>
	
	<!-- 아이디를 받아 한명의 회원을 조회해오는 메소드 -->
	<select id="findOneMemberBymemberid" parameterType="String" resultType="com.spring.bookmanage.member.JGHmodel.MemberVO">
	
		select memberid, idx, pwd, name, email, phone, addr1, 
		       addr2, post, birth, gender, regdate, lastdate, pwdate, status, imgfilename, filesize,
		       func_age(birth) as ages
		from member
		where memberid = #{memberid}
	
	</select>
	
	<!-- 컬럼명과 검색어를 받아 도서를 조회해오는 메소드  -->
	<select id="findAllBookBySearchWord" parameterType="HashMap" resultType="com.spring.bookmanage.r3.KGBModel.KGBBookVO">
	
		select *
		from book
		where ${CATEGORY} like '%' || #{SEARCHWORD} || '%'
		and status = 0
		<if test="LIBCODE != null and LIBCODE != ''">
			and libcode_fk = #{LIBCODE}
		</if>
	
	</select>
	
	
	<!-- 대여 최대갯수를 제한하기위한 메소드 -->
	<select id="findAllRentalByMemberid" parameterType="String" resultType="int">
	
		select count(*)
		from rental R join book B
		on R.bookid_fk = B.bookid
		where status = 1
		and memberid_fk = #{memberid}
		
	</select>
	
	
	<!-- 도서대여를 등록해주는 메소드 -->
	<insert id="addAllRentalById" parameterType="HashMap">
	
		insert into rental(idx, bookid_fk, memberid_fk, rentaldate, deadline, renew)
		values(rent_seq.nextval, #{BOOKID}, #{MEMBERID}, sysdate, #{DEADLINE}, default)
	
	</insert>
	
	
	<!-- 도서를 대여상태로 업데이트 해주는 메소드 -->
	<update id="updateAllBookByBookid" parameterType="String">
		update book set status = 1
		where bookid = #{bookid}
		and status = 0
	</update>
	
	
	<!-- 예약 테이블에 예약된 책이 있는지 조회하는 메소드 -->
	<select id="findAllReservationByBookid" parameterType="String" resultType="String">
		select memberid_fk
		from reservation
		where bookid_fk = #{BOOKID}
	</select>
	
	
	<!-- 예약 테이블에 예약된 책이 대출이 되어 지우는 메소드 -->
	<delete id="deleteReservationByMemberid" parameterType="String">
		delete reservation
		where bookid_fk = #{reservebookid}
	</delete>
	
	
	<resultMap type="HashMap" id="rental">
		<result column="memberid" property="MEMBERID" javaType="String"/>
		<result column="name" property="NAME" javaType="String"/>
		<result column="title" property="TITLE" javaType="String"/>
		<result column="bookid" property="BOOKID" javaType="String"/>
		<result column="rentaldate" property="RENTALDATE" javaType="String"/>
		<result column="deadline" property="DEADLINE" javaType="String"/>
		<result column="renew" property="RENEW" javaType="String"/>
		<result column="deadlinecut" property="DEADLINECUT" javaType="String"/>
	</resultMap>
	
	<!-- 대여된 목록을 가져오는 메소드 -->
	<select id="findAllRentalByCategory" parameterType="HashMap" resultMap="rental">
	
		select memberid, name, title, bookid, rentaldate, to_char(deadline, 'yyyy-mm-dd') as deadline, renew
			  ,case when deadline <![CDATA[<]]> sysdate 
		       then to_date(to_char(sysdate, 'yyyy-mm-dd')) - to_date(to_char(deadline, 'yyyy-mm-dd')) 
		       else 0 end as deadlinecut
		from rental R join member M
		on R.memberid_fk = M.memberid
		join book B
		on R.bookid_fk = B.bookid
		where ${CATEGORY} like '%' || #{SEARCHWORD} || '%'
		<if test="LIBCODE != null and LIBCODE != ''">
			and libcode_fk = #{LIBCODE}
		</if>
		order by ${SORT} asc
	
	</select>
	
	
	<!-- 연체료와 이용정지기간 등록하기 -->
	<update id="updateMemberByDeadeline" parameterType="HashMap">
	
		update member set latefee = 100 * #{DEADLINECUT}, revokedate = revokedate + #{DEADLINECUT}, status = 2
		where memberid = #{MEMBERID}
	
	</update>
	
	
	<!-- 책 상태 일반 상태로 만드는 메소드 -->
	<update id="updateBookstatusByBookid" parameterType="String">
	
		update book set status = 0
		where bookid = #{bookid}
	
	</update>
	
	
	<!-- 대여에 있던 정보를 반납에 넣어주는 메소드  -->
	<insert id="insertReturnByRentalInfo" parameterType="HashMap">
	
		insert into returned(idx, memberid_fk, bookid_fk, returndate, rentaldate)
		values(returned_seq.nextval, #{MEMBERID}, #{BOOKID}, sysdate, (select rentaldate from rental where bookid_fk = #{BOOKID}))
	
	</insert>
	
	
	<!-- 대여 테이블의 반납이 된 정보를 지워주는 메소드 -->
	<delete id="deleteRentalByBookid" parameterType="String">
		delete rental
		where bookid_fk = #{bookid}
	</delete>

</mapper>