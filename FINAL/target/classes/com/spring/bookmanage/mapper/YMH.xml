<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="YMH">
	
 

	<!-- 분야(필드)코드를 알아오는 메소드로 대분류의 백의자리수만 잘라와서 비교하여 백의 자리가 같은 중분류만 얻어간다. -->
	<select id="fieldCodeList" parameterType="String" resultType="com.spring.bookmanage.book.YMHmodel.YMHBookVO">
	
		select fcode as fcode_fk, fname
		from field
		where substr(fcode, 0,1) = #{initFcode}
	 
	</select>
	
	<!-- Library 테이블에서 도서관 명과 도서관 코드를  얻어간다. -->
	<select id="showLibrary" resultType="com.spring.bookmanage.book.YMHmodel.YMHBookVO">
	
		select libname, libcode
		from LIBRARY
		order by idx asc
	 
	</select>
	
	<!-- 출판사를 등록하기전 테이블에 같은 출판사가 있는지 알아보고 값을  얻어간다. -->
	<select id="isExistPublishers" parameterType="com.spring.bookmanage.book.YMHmodel.YMHBookVO" resultType="int">
		select count(*)
		from publisher
		where PUBCODE = #{pubCode_fk}
	</select>
	
	<!-- 출판사가 있는지 먼저 확인한 뒤 없다면 출판사를 등록한다. -->
	<insert id="addPublisher" parameterType="com.spring.bookmanage.book.YMHmodel.YMHBookVO">
		insert into publisher(PUBCODE, IDX, PUBNAME, ADDR, TEL)
		values( #{pubCode_fk}, PUB_SEQ.nextval, #{pubName}, #{addr}, #{tel} )
	</insert> 
		
	<!-- 도서 테이블에 도서 등록하기 -->
	<insert id="addOneBook" parameterType="com.spring.bookmanage.book.YMHmodel.YMHBookVO">
		insert into book(bookId, idx, title, author, PUBCODE_FK, STATUS, AGECODE, ISBN,
						 NCODE_FK, LCODE_FK, FCODE_FK, CCODE_FK, GCODE_FK, LIBCODE_FK)
		values( #{bookId} || '-' || #{bookCount}      
				
				, book_seq.nextval, #{title}, #{author}, #{pubCode_fk}, default, #{ageCode}, #{ISBN}, #{ncode_fk},
				#{lcode_fk}, #{fcode_fk},  #{ccode_fk}, #{gcode_fk}, #{libcode_fk})
	</insert> 
	
	<!-- 도서상세 테이블에 도서 등록하기 -->
	<insert id="addOneBook_detail" parameterType="com.spring.bookmanage.book.YMHmodel.YMHBookVO">
	
		insert into book_Detail(bookId, idx, intro, image, price, weight, totalpage, pdate, regdate)
		values( #{bookId} || '-' || #{bookCount}     
		      , bookd_seq.nextval, #{intro}, #{filename}, #{price}, #{weight}, #{totalPage}, #{pDate}, default)				
	</insert> 
	
	<!-- 도서 시리얼 넘버를 만들기 위해 도서시리얼에서 앞에 15자리를 알아오기 -->
	<select id="BookIdN" resultType="int" parameterType="String">

		select count(distinct substr(BOOKID, 1, instr(BOOKID, '-', 1, 2)-1))
		from Book
		where substr(BOOKID, 1, 15) = #{bookId}


	</select>
	
	<!-- returned, book, member 테이블을 조인해서 반납목록에 필요한 정보 얻어오기 -->
	<select id="listReturned" parameterType="HashMap" resultType="com.spring.bookmanage.returned.YMHmodel.ReturnedVO">
	
		select idx, memberid, name, phone, title, author, returndate, rentaldate, returnlibcode
		from 
		(
			select row_number() over(order by ${SORT} desc) as RNO, b.idx as idx, memberid_fk as memberid, name, phone, title, author, returndate, rentaldate, substr(bookid, 1, 4) as returnlibcode
			from book A join returned B
			on a.bookid = b.bookid_fk
			join member C on c.memberid = b.memberid_fk
			) T
		where RNO between #{RNO1} and #{RNO2}
		
		
		
	</select>
	
	<!-- returned 테이블의 총 갯수 구해오기 -->
	<select id="getReturnedTotalCount" resultType="int" parameterType="HashMap">
		select count(*)
		from returned
	</select>
	
	
	<!-- returned, book, member 테이블을 조인해서 반납목록에 필요한 정보 얻어오기 -->
	<select id="listReturnedWithSearch" parameterType="HashMap" resultType="com.spring.bookmanage.returned.YMHmodel.ReturnedVO">
	
		select idx, memberid, name, phone, title, author, returndate, rentaldate, returnlibcode
		from 
		(
			select row_number() over(order by ${SORT} desc) as RNO, b.idx as idx, memberid_fk as memberid, name, phone, title, author, returndate, rentaldate, substr(bookid, 1, 4) as returnlibcode
			from book A join returned B
			on a.bookid = b.bookid_fk
			join member C on c.memberid = b.memberid_fk
			where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
			) T
		where RNO between #{RNO1} and #{RNO2}
	
	
		
		
	</select>
	
	<!-- returned 테이블의 총 갯수 구해오기 하이차트 첫번째 용 -->
	<select id="getReturnedTotalCountWithSearch" resultType="int" parameterType="HashMap">
		select count(*)
		from book A join returned B
		on a.bookid = b.bookid_fk
		join member C on c.memberid = b.memberid_fk
		where upper(${COLNAME}) like upper('%'|| #{SEARCH} ||'%')
	</select>
	
	
	
	<!-- 도서관별 연체율을 알려주는 쿼리 하이차트 두번째 용 -->
	<resultMap type="HashMap" id="getlibraryOverdueRankListMap">
		<result property="LIBNAME" 		column="libname" 		javaType="String" />
		<result property="CNT" 			column="cnt" 			javaType="String" />
		<result property="PERCENTAGE" 	column="percentage" 	javaType="String" />
	</resultMap>
	<select id="libraryOverdueRankList" resultMap="getlibraryOverdueRankListMap">
		
		Select libname, 
		       count(*) as cnt,
		       trunc( ( count(libname) )/(select count(*) from ymh_chart where deadline - returndate <![CDATA[<]]> 0) * 100, 2 ) as percentage
		from ymh_chart
		where deadline - returndate <![CDATA[<]]> 0
		group by libname

	</select>
	
	
	
	<!-- 장르별 연체율을 알려주는 쿼리 -->
	<resultMap type="HashMap" id="getoverdueByGenreListMap">
		<result property="GNAME" 		column="gname" 			javaType="String" />
		<result property="PERCENT" 		column="percentage" 	javaType="String" />
	</resultMap>
	<select id="getoverdueByGenreList" resultMap="getoverdueByGenreListMap" parameterType="String">
		
		Select gname, 
       		   trunc( ( count(gname) )/(select count(*) from ymh_chart where deadline - returndate <![CDATA[<]]> 0 and libname = #{libname}) * 100, 2 ) as percentage
		from ymh_chart
		where deadline - returndate <![CDATA[<]]> 0
		and libname = #{libname}
		group by gname

	</select>
	
	
	<select id="listMessage" parameterType="HashMap" resultType="com.spring.bookmanage.message.YMHmodel.YMHMessageVO">
	
		
		select idx, sender, title, opendate, senddate, TARTGETNAME, TARTGETID
		from 
		(
			Select rownum as RNO, m.idx as idx, m.sender as sender, m.title as title, m.opendate as opendate, m.senddate as senddate, l.name as TARTGETNAME, m.TARTGETID as TARTGETID
			from message m join librarian l
			on m.sender = l.libid
			where sender = #{USERID}
			and delsend = 0
			order by idx desc
		) V 
		where RNO between #{RNO1} and #{RNO2}
		
		
	</select>
	
	
	<select id="listReceiveMessage" parameterType="HashMap" resultType="com.spring.bookmanage.message.YMHmodel.YMHMessageVO">
		
		select idx, sender, title, opendate, senddate, sendername, TARTGETID
		from 
		(
			Select rownum as RNO, m.idx as idx, m.sender as sender, m.title as title, m.opendate as opendate, m.senddate as senddate, l.name as sendername, m.TARTGETID as TARTGETID
			from message m join librarian l
			on m.sender = l.libid
			where tartgetid = #{USERID}
			and deltarget = 0
			order by idx desc
		) V 
		where RNO between #{RNO1} and #{RNO2}

	</select>
	
	
	
	<select id="getReceiveMessageTotalCount" parameterType="HashMap" resultType="int">
		Select count(*)
		from message 
		where TARTGETID = #{USERID}
		and deltarget = 0

	</select>
	
	
	<select id="getSendMessageTotalCount" parameterType="HashMap" resultType="int">
		Select count(*)
		from message 
		where SENDER = #{USERID}
		and delsend = 0

	</select>
	
	
	
	
	<select id="deleteReceiveMessage" parameterType="HashMap" resultType="int">
		
		update message set deltarget = 1
		where idx = #{IDX} 

	</select>
	
	
	<select id="deleteSendMessage" parameterType="HashMap" resultType="int">
		
		update message set delsend = 1
		where idx = #{IDX} 

	</select>
	
	
	<select id="listYMHMessage" parameterType="String" resultType="com.spring.bookmanage.message.YMHmodel.YMHMessageVO">
		
		Select title, senddate, message, opendate
		from message
		where idx = #{idx}
	</select>


	<select id="setOpenDate" parameterType="String" resultType="int">
		
		update message set opendate = sysdate
		where idx = #{IDX} 

	</select>














</mapper>

















