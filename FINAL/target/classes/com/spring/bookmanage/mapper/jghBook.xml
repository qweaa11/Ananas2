<?xml version="1.0" encoding="UTF-8"?>

<!-- ===== #28. mapper 기본 설정 ===== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ===== #29. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) ===== -->
<mapper namespace="jghBook">

	<!-- 검색조건에 따른 삭제도서 목록 조회 -->
	<select id="findAllDeleteBookBySearchOption" parameterType="HashMap" resultType="com.spring.bookmanage.book.JGHmodel.DeleteBookVO">
		select rownum as rno, bookid, title, author, pubname, agecode, count, delid, deldate, cleanerid
		from
			(
			select distinct substr(D.bookid,1, instr(D.bookid,'-',1,2)-1 ) as bookid
				, title, author, pubname, agecode, count, delid
				, to_char(deldate, 'yyyy-mm-dd') as deldate, cleanerid
			from delete_book D join publisher P
			on D.pubcode = P.pubcode
			join ( select substr(bookid,1, instr(bookid,'-',1,2)-1 ) as bookid,  count(*) as count
			        from delete_book group by substr(bookid,1, instr(bookid,'-',1,2)-1 )
			      ) V
			on substr(D.bookid, 1, instr(D.bookid,'-',1,2)-1 ) = V.bookid
			where ${colname} like '%'||#{searchWord}||'%'
			) T
		order by deldate desc, rno asc
	</select>
	
	<!-- 검색조건없는 삭제도서 목록 조회(도서삭제 목록 전체조회) -->
	<select id="findAllDeleteBook" resultType="com.spring.bookmanage.book.JGHmodel.DeleteBookVO">
		select rownum as rno, bookid, title, author, pubname, agecode, count, delid, deldate, cleanerid
		from
			(
			select distinct substr(D.bookid,1, instr(D.bookid,'-',1,2)-1 ) as bookid
				, title, author, pubname, agecode, count, delid
				, to_char(deldate, 'yyyy-mm-dd') as deldate, cleanerid
			from delete_book D join publisher P
			on D.pubcode = P.pubcode
			join ( select substr(bookid,1, instr(bookid,'-',1,2)-1 ) as bookid,  count(*) as count
			        from delete_book group by substr(bookid,1, instr(bookid,'-',1,2)-1 )
			     ) V
			on substr(D.bookid, 1, instr(D.bookid,'-',1,2)-1 ) = V.bookid
			) T
		order by deldate desc, rno asc
	</select>
	
	<!-- 선택한 삭제도서 목록 조회 -->
	<select id="findAllDeleteBookByDelid" parameterType="HashMap" resultType="com.spring.bookmanage.book.JGHmodel.DeleteBookVO">
		select rownum as rno, bookid, title, author, pubcode, status, agecode
			, isbn, ncode, lcode, fcode, ccode, gcode
			, libcode, intro, image, price, weight, totalpage
			, pdate, regdate, deldate, count, delid, cleanerid
		from
			(
			select distinct substr(D.bookid,1, instr(D.bookid,'-',1,2)-1 ) as bookid
				, title, author, D.pubcode, status, agecode
				, isbn, ncode, lcode, fcode, ccode, gcode
				, libcode, intro, image, price, weight, totalpage
				, to_char(pdate, 'yyyy-mm-dd') as pdate
				, to_char(regdate, 'yyyy-mm-dd') as regdate
				, to_char(deldate, 'yyyy-mm-dd') as deldate
				, count, delid, cleanerid
			from delete_book D join publisher P
			on D.pubcode = P.pubcode
			join ( select substr(bookid,1, instr(bookid,'-',1,2)-1 ) as bookid,  count(*) as count
			        from delete_book group by substr(bookid,1, instr(bookid,'-',1,2)-1 )
			     ) V
			on substr(D.bookid, 1, instr(D.bookid,'-',1,2)-1 ) = V.bookid
			) T
		where delid in
		<foreach collection="delidArray" index="i" open="(" separator="," close=")"> <!-- 반복횟수 : index  시작 열기 : open  구분자 : separator 끝 닫기 : close -->
	         ${delidArray[i]}
	    </foreach>
		order by deldate desc, rno asc
	</select>
	
	<!-- 삭제도서 복원(Transaction) -->
	<!--
		도서일련번호와 출판정보를 위해 사용할 종합뷰
		create or replace view view_bookid as
		    select B.bookid, title, author, to_char(D.regdate,'yyyy-mm-dd') as regdate
		        , libname, LI.tel 
		        , nname, lname, cname, fname, gname
		        , substr(B.bookid,1,instr(B.bookid,'-',1)-1) as simple
		        , P.pubname
		    from book B join book_detail D on B.bookid = D.bookid
		    join library LI on B.libcode_fk = LI.libcode
		    join nation N on B.ncode_fk = N.ncode
		    join language LA on B.lcode_fk = LA.lcode
		    join category C on B.ccode_fk = C.ccode
		    join field F on B.fcode_fk = F.fcode
		    join genre G on B.gcode_fk = G.gcode
		    join PUBLISHER P on B.pubcode_fk = P.pubcode;
	    
		삭제도서 복원 프로시저
		create or replace procedure pcd_restorebook
		(param_bookid       in book.bookid%type, 			param_title    	in book.title%type
		, param_author      in book.author%type, 			param_pubcode  	in book.pubcode_fk%type
		, param_status      in book.status%type, 			param_agecode 	in book.agecode%type
		, param_isbn        in book.isbn%type, 				param_ncode    	in book.ncode_fk%type
		, param_lcode       in book.lcode_fk%type, 			param_fcode	  	in book.fcode_fk%type
		, param_ccode       in book.ccode_fk%type, 			param_gcode    	in book.gcode_fk%type
		, param_libcode     in book.libcode_fk%type
		
		, param_intro       in book_detail.intro%type, 		param_image     in book_detail.image%type
		, param_price       in book_detail.price%type, 		param_weight    in book_detail.weight%type
		, param_totalpage   in book_detail.totalpage%type, 	param_pdate 	in book_detail.pdate%type
		, param_regdate     in book_detail.regdate%type, 	param_count   	in number
		
		, param_delid       in delete_book.delid%type
		)
		
		    is
		        v_bookid    number:=0;
		    begin
		        select nvl(MAX
		        (
		            to_number
		            (
		                substr
		                (
		                    bookid, instr(bookid, '-', 1, 1)+1, 
		                    length(substr(bookid, instr(bookid, '-', 1, 1)+1)) - length(substr(bookid, instr(bookid, '-', 1, 2)))
		                )
		            )
		        ),0) into v_bookid
		        from view_bookid
		        where simple = substr(param_bookid,1,15);
		        
		              갱신할 삭제도서 묶음 복원
		        for i in 1..param_count loop
		        	도서에 복원
		            insert into book(idx, bookid, title, author, pubcode_fk, status, agecode, isbn, ncode_fk, lcode_fk, fcode_fk, ccode_fk, gcode_fk, libcode_fk)
		            values(book_seq.nextval, substr(param_bookid, 1, 15) || '-' || (v_bookid+1) || '-' || i, param_title, param_author, param_pubcode, param_status, param_agecode, param_isbn, param_ncode, param_lcode, param_fcode, param_ccode, param_gcode, param_libcode);
		            
		                     도서상세에 복원
		            insert into book_detail(idx, bookid, intro, image, price, weight, totalpage, pdate, regdate)
		            values(bookD_seq.nextval, substr(param_bookid, 1, 15)||'-'||(v_bookid+1)||'-'||i, param_intro, param_image, param_price, param_weight, param_totalpage, param_pdate, param_regdate);
		        end loop;
		        
		              삭제도서 삭제
		        delete from delete_book where delid = param_delid;
		        
		    end pcd_restorebook;
	-->
	<delete id="restoreBook" statementType="CALLABLE" parameterType="com.spring.bookmanage.book.JGHmodel.DeleteBookVO">
		{
			call pcd_restorebook
			(
				#{bookid, mode=IN}
				,#{title, mode=IN}
				,#{author, mode=IN}
				,#{pubcode, mode=IN}
				,#{status, mode=IN}
				,#{agecode, mode=IN}
				,#{ISBN, mode=IN}
				,#{ncode, mode=IN}
				,#{lcode, mode=IN}
				,#{fcode, mode=IN}
				,#{ccode, mode=IN}
				,#{gcode, mode=IN}
				,#{libcode, mode=IN}
				
				,#{intro, mode=IN}
				,#{image, mode=IN}
				,#{price, mode=IN}
				,#{weight, mode=IN}
				,#{totalpage, mode=IN}
				,#{pdate, mode=IN}
				,#{regdate, mode=IN}
				,#{count, mode=IN}
				
				,#{delid, mode=IN}
			)
		}
	</delete>

</mapper>